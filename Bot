/*
    This sketch demonstrates how to set up a simple HTTP-like server.
    The server will set a GPIO pin depending on the request
      http://server_ip/gpio/0 will set the GPIO2 low,
      http://server_ip/gpio/1 will set the GPIO2 high
    server_ip is the IP address of the ESP8266 module, will be
    printed to Serial when the module is connected.
*/

#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

#ifndef STASSID
#define STASSID "SENAC VISITANTES"
#define STAPSK  "trijuntos"
#endif

const char* ssid = STASSID;
const char* password = STAPSK;

#define BUTTON1 16
#define BUTTON2 5

// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(80);
HTTPClient http;

String phoneNumber = "555192996396";
String apiKey = "2448636";

void setup() {
  Serial.begin(9600);

  // prepare LED
  pinMode(BUTTON1, OUTPUT);
  pinMode(BUTTON2, OUTPUT);
  digitalWrite(BUTTON1, 0);
  digitalWrite(BUTTON2, 0);

  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print(F("Connecting to "));
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println();
  Serial.println(F("WiFi connected"));

  // Print the IP address
  Serial.println(WiFi.localIP());

  String message =  "teste"+ WiFi.localIP().toString(); //"SOU_NODEMCU_MEU_IP-" + WiFi.localIP().toString();
  Serial.println(message);
  String url = "http://api.callmebot.com/whatsapp.php?phone=" + phoneNumber + "&apikey=" + apiKey + "&text=" + message;
 
  WiFiClient wfclient;
  http.begin(wfclient, url);
  // Specify content-type header
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
 
  // Send HTTP POST request
  int httpResponseCode = http.POST(url);
  if (httpResponseCode == 200){
    Serial.print("Message sent successfully");
  }
  else{
    Serial.println("Error sending the message");
    Serial.print("HTTP response code: ");
    Serial.println(httpResponseCode);
  }

  // Free resources
  http.end();

 
  // Start the server
  server.begin();
  Serial.println(F("Server started"));
}

void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  Serial.println(F("new client"));

  client.setTimeout(5000); // default is 1000

  // Read the first line of the request
  String req = client.readStringUntil('\r');
  Serial.println(F("request: "));
  Serial.println(req);

  // Match the request
  if (req.indexOf(F("/btn1")) != -1) {
    int btn1 = digitalRead(BUTTON1);
    btn1 = !btn1;
    digitalWrite(BUTTON1, btn1);
        String message =  "Favor_Preciso_de_ajuda_segue_a_minha_localização:'https://maps.app.goo.gl/bAjC1rr1djWGv1z7A'" ; //"SOU_NODEMCU_MEU_IP-" + WiFi.localIP().toString();
      Serial.println(message);
      String url = "http://api.callmebot.com/whatsapp.php?phone=" + phoneNumber + "&apikey=" + apiKey + "&text=" + message;

      WiFiClient wfclient;
      http.begin(wfclient, url);
      // Specify content-type header
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");

      // Send HTTP POST request
      int httpResponseCode = http.POST(url);
      if (httpResponseCode == 200){
        Serial.print("Message sent successfully");
      }
      else{
        Serial.println("Error sending the message");
        Serial.print("HTTP response code: ");
        Serial.println(httpResponseCode);
      }
    } 
  
  else if (req.indexOf(F("/btn2")) != -1) {
    int btn2 = digitalRead(BUTTON2);
    btn2 = !btn2;
    digitalWrite(BUTTON2, btn2);
    String message =  "teste"+ WiFi.localIP().toString(); //"SOU_NODEMCU_MEU_IP-" + WiFi.localIP().toString();
  Serial.println(message);
  String url = "http://api.callmebot.com/whatsapp.php?phone=" + phoneNumber + "&apikey=" + apiKey + "&text=" + message;
 
  WiFiClient wfclient;
  http.begin(wfclient, url);
  // Specify content-type header
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
 
  // Send HTTP POST request
  int httpResponseCode = http.POST(url);
  if (httpResponseCode == 200){
    Serial.print("Message sent successfully");
  }
  else{
    Serial.println("Error sending the message");
    Serial.print("HTTP response code: ");
    Serial.println(httpResponseCode);
  }
  } 
  
  
 else {
    Serial.println(F("invalid request"));
    //val = digitalRead(LED_BUILTIN);
  }

  // Set LED according to the request
  // read/ignore the rest of the request
  // do not client.flush(): it is for output only, see below
  while (client.available()) {
    // byte by byte is not very efficient
    client.read();
  }

  // Send the response to the client
  // it is OK for multiple small client.print/write,
  // because nagle algorithm will group them into one single packet
  client.print(F("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\nGPIO is now "));
  //client.print((val) ? F("high") : F("low"));
  client.print(F("<br><br>Click <a href='http://"));
  client.print(WiFi.localIP());
  client.print(F("/btn1'>here</a> Para chavear LED GPIO1 on/off, or <a href='http://"));
  client.print(WiFi.localIP());
  client.print(F("/btn2'>here</a> Para chavear LED GPIO2 on/off.</html>"));

  // The client will actually be flushed then disconnected
  // when the function returns and 'client' object is destroyed (out-of-scope)
  // flush = ensure written data are received by the other side
  Serial.println(F("Disconnecting from client"));
}
